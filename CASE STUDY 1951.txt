QUESTION 1.
-----------

CREATE OR REPLACE PROCEDURE DISPLAY_COURSE_DET
AS
	CURSOR A IS SELECT * FROM COURSE WHERE STATUS='V';
	CURSOR B IS SELECT COURSE,COUNT(*) TOTAL FROM COURSE GROUP BY COURSE;
BEGIN
	FOR V_A IN A
	LOOP
	DBMS_OUTPUT.PUT_LINE
	(
		V_A.INSTITUTE || ' ' || 
		V_A.COURSE || ' ' || 
		V_A.DURATION_IN_MONTHS || ' ' || 
		V_A.CCOST || ' ' || 
		V_A.LAUNCH_DATE || ' ' || 
		V_A.STATUS
	);
	END LOOP;
	DBMS_OUTPUT.PUT_LINE('-----');
	DBMS_OUTPUT.PUT_LINE('-----');
	FOR V_B IN B
	LOOP
	DBMS_OUTPUT.PUT_LINE
	(
		V_B.COURSE || ' ' || 
		V_B.TOTAL
	);
	END LOOP;
END;

EXEC DISPLAY_COURSE_DET

QUESTION 2.
-----------

CREATE SEQUENCE NEWEMPID;

CREATE OR REPLACE PACKAGE PKG_DEVELOPER
AS
	PROCEDURE ADD_STUDIES
	(
		P_EID VARCHAR2,
		P_INS VARCHAR2,
		P_CRS VARCHAR2,
		P_STA CHAR,
		P_STDT DATE
	);
	PROCEDURE ADD_DEVELOPER
	(
		P_NM VARCHAR2,
		P_DOB DATE,
		P_DOJ DATE,
		P_SEX VARCHAR2,
		P_PR1 VARCHAR2,
		P_PR2 VARCHAR2,
		P_SAL NUMBER
	);
	PROCEDURE SHOW_ROYALTY
	(
		P_EID VARCHAR2
	);
END PKG_DEVELOPER;

CREATE OR REPLACE PACKAGE BODY PKG_DEVELOPER
AS
	FUNCTION CALCULATE_ROYALTY
	(
		P_EID VARCHAR2
	) RETURN NUMBER
	AS
		V_TOTAL NUMBER;
	BEGIN
		SELECT SUM(SCOST*0.10*SOLD) TOTAL
		INTO V_TOTAL
		FROM PACKAGE
		WHERE EMP_ID=P_EID
		GROUP BY EMP_ID;
		IF V_TOTAL = 0 THEN
			RETURN -2;
		ELSE
			RETURN V_TOTAL;
		END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		RETURN -1;
	END;
	PROCEDURE ADD_STUDIES
	(
		P_EID VARCHAR2,
		P_INS VARCHAR2,
		P_CRS VARCHAR2,
		P_STA CHAR,
		P_STDT DATE
	)
	AS
		V_EID PROGRAMMER.EMP_ID%TYPE;
		V_COUNT NUMBER;
		E_COMBO_ERR EXCEPTION;
		E_STATUS_ERR EXCEPTION;
		E_DATE_ERR EXCEPTION;
	BEGIN
		IF P_STA != 'V'  THEN
			RAISE E_STATUS_ERR;
		END IF;
		IF P_STDT >= SYSDATE OR MONTHS_BETWEEN(SYSDATE,P_STDT) > 2 THEN
			RAISE E_DATE_ERR;
		END IF;
		SELECT EMP_ID INTO V_EID FROM PROGRAMMER WHERE EMP_ID=P_EID;
		SELECT COUNT(*) INTO V_COUNT FROM COURSE
		WHERE INSTITUTE=P_INS AND COURSE=P_CRS;
		IF V_COUNT = 0 THEN
			RAISE E_COMBO_ERR;
		END IF;
		INSERT INTO STUDIES
		VALUES
		(
			P_EID,
			P_INS,
			P_CRS,
			P_STDT
		);
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('EMPLOYEE PASSED DOES NOT EXIST');
		WHEN E_COMBO_ERR THEN
		DBMS_OUTPUT.PUT_LINE('INSTITUTE - COURSE COMBINATION INVALID, VERIFY!!!');
		WHEN E_STATUS_ERR THEN
		DBMS_OUTPUT.PUT_LINE('CANNOT ADD COURSE WITH STATUS INVALID!');
		WHEN E_DATE_ERR THEN
		DBMS_OUTPUT.PUT_LINE('DATE ERRORS');
	END;
	PROCEDURE ADD_DEVELOPER
	(
		P_NM VARCHAR2,
		P_DOB DATE,
		P_DOJ DATE,
		P_SEX VARCHAR2,
		P_PR1 VARCHAR2,
		P_PR2 VARCHAR2,
		P_SAL NUMBER
	)
	AS
		INVALID_DOJ EXCEPTION;
		CHECK_DOB EXCEPTION;
	BEGIN
		IF P_DOJ <= '12-JAN-98' THEN
			RAISE INVALID_DOJ;
		END IF;
		IF MONTHS_BETWEEN(P_DOJ,P_DOB) <= 240 THEN
			RAISE CHECK_DOB;
		END IF;
		BEGIN
			INSERT INTO PROGRAMMER
			VALUES(P_NM,NEWEMPID.NEXTVAL,P_DOB,P_DOJ,P_SEX,P_PR1,P_PR2,P_SAL);
		END;
	EXCEPTION
		WHEN INVALID_DOJ THEN
		DBMS_OUTPUT.PUT_LINE('DOJ CANNOT BE LESS THAN 13-JAN-98');
		WHEN CHECK_DOB THEN
		DBMS_OUTPUT.PUT_LINE('CANDIDATE SHOULD HAVE ATTAINED 20 YEARS OF AGE ATJ');
	END;
	PROCEDURE SHOW_ROYALTY
	(
		P_EID VARCHAR2
	)
	AS
		V_RESULT NUMBER;
	BEGIN
	V_RESULT := CALCULATE_ROYALTY(P_EID);
	IF V_RESULT = -1 THEN
		DBMS_OUTPUT.PUT_LINE('DEVELOPER PASSED DOES NOT EXIST');
	ELSIF V_RESULT = -2 THEN
		DBMS_OUTPUT.PUT_LINE('SOFTWARE NOT DEVELOPED BY DEVELOPER');
	ELSE
		DBMS_OUTPUT.PUT_LINE('THE ROYALTY EARNED IS : ' || V_RESULT);
	END IF;
	END;
END PKG_DEVELOPER;

EXEC PKG_DEVELOPER.ADD_DEVELOPER('SNEHA','01-JAN-90',SYSDATE,'F','SQL','PLSQL',3000)

EXEC PKG_DEVELOPER.ADD_DEVELOPER('SNEHA','01-JAN-90','01-JAN-97','F','SQL','PLSQL',3000)

EXEC PKG_DEVELOPER.ADD_DEVELOPER('SNEHA','16-DEC-97',SYSDATE,'F','SQL','PLSQL',3000)


QUESTION 3.
-----------

-- SOLUTION TO CREATE A NESTED TABLE
 
CREATE TYPE COURSE_DETAILS IS OBJECT
(
	INSTITUTE VARCHAR2(10),
	COURSE VARCHAR2(5),
	DURATION_IN_MONTHS NUMBER(3),
	CCOST NUMBER(6),
	LAUNCH_DATE DATE,
	STATUS CHAR(1)
);

CREATE TYPE COURSE_TYPE AS TABLE OF COURSE_DETAILS;

CREATE TABLE COURSE_TAB
(
COURSE_ID NUMBER PRIMARY KEY,
COURSE_DET COURSE_TYPE
) NESTED TABLE COURSE_DET STORE AS COURSE_TAB_NT

INSERT INTO COURSE_TAB
VALUES
(
	1,
	COURSE_TYPE
	(
	COURSE_DETAILS('MITCON','DCA',6,23000,SYSDATE,'V'),
	COURSE_DETAILS('MITCON','PGDBA',12,57000,SYSDATE,'V')
	)
);

INSERT INTO COURSE_TAB
VALUES
(
	2,
	COURSE_TYPE
	(
	COURSE_DETAILS('MIT','PGDCA',12,53000,SYSDATE,'I'),
	COURSE_DETAILS('MIT','PGDBA',12,51000,SYSDATE,'I')
	)
);

INSERT INTO COURSE_TAB
VALUES
(
	3,
	COURSE_TYPE
	(
	COURSE_DETAILS('OXFORD','MCA',24,123000,SYSDATE,'V'),
	COURSE_DETAILS('OXFORD','PGDBM',24,151000,SYSDATE,'V')
	)
);

SELECT * FROM COURSE_TAB;

